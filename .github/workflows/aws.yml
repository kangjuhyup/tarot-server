
name: Deploy and Build

on:
  push:
    branches: [ "production" ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: tarot_server

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag tarot-server:latest 917726205845.dkr.ecr.us-east-1.amazonaws.com/tarot_server:latest && docker push 917726205845.dkr.ecr.us-east-1.amazonaws.com/tarot_server:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        touch scripts/deploy.sh
        echo "aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin $ECR_REGISTRY" >> scripts/deploy.sh
        echo "docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> scripts/deploy.sh
        echo "docker run -p 8001:8001 --name tartot-server -d  --restart always $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> scripts/deploy.sh

      - name: upload to s3
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          zip -r deploy-$IMAGE_TAG.zip ./scripts appspec.yml
          aws s3 cp --region $env.AWS_REGION --acl private ./deploy-$IMAGE_TAG.zip s3://tarot-server
          
      - name: start deploy
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws deploy create-deployment --application-name tarot-server-deployer \
          --deployment-config-name CodeDeployDefault.OneAtATime \
          --deployment-group-name tarot-server-deploy-group \
          --s3-location bucket=tarot-server,bundleType=zip,key=deploy-$IMAGE_TAG.zip