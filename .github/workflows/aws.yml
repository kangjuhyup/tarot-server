name: Deploy and Build

on:
  push:
    branches: [ "production" ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: tarot-server

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

       - name: Generate Environment Variables File for Production
      run: |
        echo "DATABASE_NAME=$DATABASE_NAME" >> .env.production
        echo "DATABASE_PORT=$DATABASE_PORT" >> .env.production
        echo "DATABASE_PWD=$DATABASE_PWD" >> .env.production
        echo "DATABASE_URL=$DATABASE_URL" >> .env.production
        echo "JWT_ACCESS_SECRET=$JWT_ACCESS_SECRET" >> .env.production
        echo "JWT_REFRESH_SECRET=$JWT_REFRESH_SECRET" >> .env.production
        echo "KAKAO_CALLBACK_URL=$KAKAO_CALLBACK_URL" >> .env.production
        echo "KAKAO_CLIENT_ID=$KAKAO_CLIENT_ID" >> .env.production
        echo "PAPAGO_API_KEY=$PAPAGO_API_KEY" >> .env.production
        echo "PAPAGO_ID=$PAPAGO_ID" >> .env.production
        echo "OPEN_AI_KEY=$OPEN_AI_KEY" >> .env.production
        echo "OPEN_AI_ORG=$OPEN_AI_ORG" >> .env.production
      env:
        OPEN_AI_ORG: ${{ secrets.OPEN_AI_ORG }}
        OPEN_AI_KEY: ${{ secrets.OPEN_AI_KEY }}
        PAPAGO_API_KEY: ${{ secrets.PAPAGO_API_KEY }}
        PAPAGO_ID: ${{ secrets.PAPAGO_ID }}
        KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
        KAKAO_CALLBACK_URL: ${{ secrets.KAKAO_CALLBACK_URL }}
        JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
        JWT_ACCESS_SECRET: ${{ secrets.JWT_ACCESS_SECRET }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        DATABASE_PWD: ${{ secrets.DATABASE_PWD }}
        DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
        DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
        
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        touch ./scripts/deploy.sh
        echo "aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin $ECR_REGISTRY" >> scripts/deploy.sh
        echo "sudo docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> scripts/deploy.sh
        echo "sudo docker run -p 8001:8001 --name tartot-server -d --restart always $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> scripts/deploy.sh

        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Upload to S3
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        zip -r deploy-$IMAGE_TAG.zip ./scripts appspec.yml
        aws s3 cp --region $AWS_REGION --acl private ./deploy-$IMAGE_TAG.zip s3://tarot-server

    - name: Start deploy
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        aws deploy create-deployment --application-name tarot-server-deployer \
        --deployment-config-name CodeDeployDefault.OneAtATime \
        --deployment-group-name tarot-server-deploy-group \
        --s3-location bucket=tarot-server,bundleType=zip,key=deploy-$IMAGE_TAG.zip
  